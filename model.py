import torch
import torch.nn as nn
import torchvision.transforms.functional as TF


# This Pytorch implementation of the well-known U-Net architecture was presented
# by Aladdin Persson (YouTube, GitHub). The main idea is to first create the
# DoubleConv class, since this functionality is essentially repeated on every
# level of the U-Net (even on both sides). Next, by creating the U-Net class
# the left (contracting) side, the bottleneck and the right (expanding side) are
# implemented.

# The initial experiment shall make use of data generated by the analytical
# couette, since this can best be modified to resemble the data as presented in
# the original U-Net paper: 572x572 greyscale image. We shall opt for 64x64
# without noise for proof of concept.

class DoubleConv(nn.Module):
    # For the MaMiCo implementation consider reflective padding and leaky ReLu.
    # Also, consider revisting BatchNorm2d.
    def __init__(self, in_channels, out_channels):
        # PARAMETERS:
        # in_channels - channels contained in input data
        # out_channels - number of applied kernels -> channels contained in
        # output data
        super(DoubleConv, self).__init__()
        self.conv = nn.Sequential(
            nn.Conv2d(in_channels, out_channels, 3, 1, 1, bias=False),
            # PARAMETERS:
            # 3: kernel_size
            # 1: stride
            # 1: padding -> same padding
            nn.BatchNorm2d(out_channels),
            nn.ReLU(inplace=True),
            nn.Conv2d(out_channels, out_channels, 3, 1, 1, bias=False),
            nn.BatchNorm2d(out_channels),
            nn.ReLU(inplace=True),
        )

    def forward(self, x):
        return self.conv(x)


class UNET(nn.Module):
    # First define the UNET model. For the MaMiCo implementation, consider
    # the proper amount of input channels as well as the proper spatial
    # dimensionality, such that the depth of the U-Net can be chosen accordingly.
    # Additionally, consider creating a "calculater" to determine the possible
    # depth.

    def __init__(
            self, in_channels=32, out_channels=32, features=[64, 128, 256, 512],
    ):
        # PARAMETERS:
        # in_channels - channels contained in input data
        # out_channels - channels to be contained in output data
        # features - corresponds to the number of applied kernels per convolution

        super(UNET, self).__init__()
        self.ups = nn.ModuleList()
        self.downs = nn.ModuleList()
        self.pool = nn.MaxPool3d(kernel_size=2, stride=2)
        # This creates special lists to store nn.Modules for the contracting and
        # expanding path. it is iterable.

        # Down part of UNET
        for feature in features:
            self.downs.append(DoubleConv(in_channels, feature))
            in_channels = feature

        # Up part of UNET
        for feature in reversed(features):
            self.ups.append(
                nn.ConvTranspose3d(
                    feature*2, feature, kernel_size=2, stride=2,
                )
            )
            self.ups.append(DoubleConv(feature*2, feature))

        # This is the "deepest" part.
        self.bottleneck = DoubleConv(features[-1], features[-1]*2)

        # This is the model's output.
        self.final_conv = nn.Conv3d(features[0], out_channels, kernel_size=1)

    def forward(self, x):
        # The forward method is an inherited method from the parent class
        # nn.Module and must be overriden. It defines the mechanics of the
        # neural network, i.e. what is performed on the input in order to
        # acquire the desired output.

        # The expanding path requires the so-called skip-connections from their
        # respective counter-part on the contracting path. For this we need the
        # following (list) container.
        skip_connections = []

        # The following for-loop describes the entire (left) contracting side,
        # including storing the skip-connections:
        for down in self.downs:
            x = down(x)
            skip_connections.append(x)
            x = self.pool(x)

        # This is the bottleneck
        x = self.bottleneck(x)
        skip_connections = skip_connections[::-1]

        # The following for-loop describes the entire (right) expanding side.
        # Notice how the index iterates in steps of 2. This is because the up
        # list contains two elements per heirarchical layer.
        for idx in range(0, len(self.ups), 2):
            x = self.ups[idx](x)
            skip_connection = skip_connections[idx//2]

            if x.shape != skip_connection.shape:
                x = TF.resize(x, size=skip_connection.shape[2:])

            concat_skip = torch.cat((skip_connection, x), dim=1)
            x = self.ups[idx+1](concat_skip)

        return self.final_conv(x)


def test():
    x = torch.randn((1, 64, 64, 64))
    model = UNET(in_channels=1, out_channels=1)
    preds = model(x)
    assert preds.shape == x.shape


if __name__ == "__main__":
    test()
